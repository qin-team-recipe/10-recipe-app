// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Chef {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  image_url   String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  recipes     Recipe[]
  follows     Follow[]
  links       Link[]
}

model Link {
  id         Int      @id @default(autoincrement())
  site       String
  url        String
  site_id    String?
  follower   String?
  chef       Chef     @relation(fields: [chef_id], references: [id], onDelete: Cascade)
  chef_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model User {
  id           String         @id @db.Uuid
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  shoppingList ShoppingList[]
  favorites    Favorite[]
  follows      Follow[]
  recipes      Recipe[]
}

model Recipe {
  id           Int            @id @default(autoincrement())
  title        String
  description  String?
  servings     String
  link         String?
  image_url1   String
  image_url2   String?
  // statusはmyrecipeかpublished　バリデーションはサーバーアクションで行う？
  status       String
  chef         Chef?          @relation(fields: [chef_id], references: [id], onDelete: Cascade)
  chef_id      Int?
  user         User?          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      String?        @db.Uuid
  shoppingList ShoppingList[]
  instructions Instruction[]
  ingredients  Ingredient[]
  favorites    Favorite[]
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now()) @updatedAt
}

model Instruction {
  id          Int      @id @default(autoincrement())
  step        Int
  description String?
  note        String?
  recipe      Recipe   @relation(fields: [recipe_id], references: [id], onDelete: Cascade)
  recipe_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
}

model Ingredient {
  id            Int            @id @default(autoincrement())
  name          String
  quantity      String?
  recipe        Recipe         @relation(fields: [recipe_id], references: [id], onDelete: Cascade)
  recipe_id     Int
  shoppingItems ShoppingItem[]
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now()) @updatedAt
}

model ShoppingList {
  id            Int            @id @default(autoincrement())
  step          Int
  user          User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String         @db.Uuid
  recipe        Recipe?        @relation(fields: [recipe_id], references: [id], onDelete: Cascade)
  recipe_id     Int?
  shoppingItems ShoppingItem[]
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now()) @updatedAt
}

model ShoppingItem {
  id              Int          @id @default(autoincrement())
  isChecked       Boolean
  shoppingList    ShoppingList @relation(fields: [shoppingList_id], references: [id], onDelete: Cascade)
  shoppingList_id Int
  ingredient      Ingredient?  @relation(fields: [ingredient_id], references: [id], onDelete: Cascade)
  ingredient_id   Int?
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now()) @updatedAt
}

model Favorite {
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String   @db.Uuid
  recipe     Recipe   @relation(fields: [recipe_id], references: [id], onDelete: Cascade)
  recipe_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@id([user_id, recipe_id])
}

model Follow {
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String   @db.Uuid
  chef       Chef     @relation(fields: [chef_id], references: [id], onDelete: Cascade)
  chef_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@id([user_id, chef_id])
}
