generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String        @id @db.Uuid
  name        String
  description String
  image_url   String
  is_chef     Boolean?
  created_at  DateTime?     @default(now())
  updated_at  DateTime?     @default(now()) @updatedAt
  following   Follow[]      @relation("following")
  followed    Follow[]      @relation("followed")
  Link        Link[]
  Favorite    Favorite[]
  Recipe      Recipe[]
  Ingredients Ingredients[]

  @@map("users")
}

model Recipe {
  id           String        @id @default(uuid())
  user         User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      String        @db.Uuid
  title        String
  description  String?
  image_url    String?
  status       RecipeStatus  @default(PUBLIC)
  instructions String[]
  created_at   DateTime?     @default(now())
  updated_at   DateTime?     @default(now()) @updatedAt
  Link         Link[]
  Favorite     Favorite[]
  Ingredients  Ingredients[]

  @@map("recipes")
}

model Ingredients {
  id         String       @id @default(uuid())
  recipe     Recipe?      @relation(fields: [recipe_id], references: [id], onDelete: Cascade)
  recipe_id  String?
  user       User?        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String?      @db.Uuid
  step       Int?
  quantity   Int          @default(1)
  created_at DateTime?    @default(now())
  updated_at DateTime?    @default(now()) @updatedAt
  ingredient Ingredient[]

  @@map("ingredients_lists")
}

model Ingredient {
  id               String      @id @default(uuid())
  ingredients      Ingredients @relation(fields: [ingredients_id], references: [id], onDelete: Cascade)
  ingredients_id   String
  name             String?
  step             Int?
  is_checked       Boolean?
  is_shopping_list Boolean?
  created_at       DateTime?   @default(now())
  updated_at       DateTime?   @default(now()) @updatedAt

  @@map("ingredients")
}

model Link {
  id         String    @id @default(uuid())
  user       User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String?   @db.Uuid
  recipe     Recipe?   @relation(fields: [recipe_id], references: [id], onDelete: Cascade)
  recipe_id  String?
  url        String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now()) @updatedAt

  @@map("links")
}

model Follow {
  following    User      @relation("following", fields: [following_id], references: [id], onDelete: Cascade)
  following_id String    @db.Uuid
  followed     User      @relation("followed", fields: [followed_id], references: [id], onDelete: Cascade)
  followed_id  String    @db.Uuid
  created_at   DateTime? @default(now())
  updated_at   DateTime? @default(now()) @updatedAt

  @@unique([following_id, followed_id])
  @@map("follows")
}

model Favorite {
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String    @db.Uuid
  recipe     Recipe    @relation(fields: [recipe_id], references: [id], onDelete: Cascade)
  recipe_id  String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now()) @updatedAt

  @@unique([user_id, recipe_id])
  @@map("favorites")
}

enum RecipeStatus {
  PUBLIC
  LIMIT
  PRIVATE
}
